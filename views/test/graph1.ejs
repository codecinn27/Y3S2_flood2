<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" type="x-icon" href="https://res.cloudinary.com/du43x2mnv/image/upload/v1724209712/flood_logo_jls8hq.png">
    <script src="https://cdn.jsdelivr.net/npm/luxon@2.3.0/build/global/luxon.min.js"></script> <!-- Include Luxon, for date -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.2.1/dist/chart.min.js"></script> <!-- Updated Chart.js -->
    
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@1.2.0"></script> <!-- Include date-fns adapter -->
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@1.1.0"></script> <!-- Include Luxon adapter -->
    <script src="https://cdn.socket.io/4.0.0/socket.io.min.js"></script>
    <title>Graph 1</title>
    <style>
        canvas {
            max-width: 100%;
            height: 400px;
            border: 1px solid black; /* Add a border to help visualize */
        }
    </style>
</head>
<body>
    <div>
        <h2>Distance (cm) Over Time</h2>
        <canvas id="distanceChart"></canvas>
    </div>

    <script>
        // Initialize Socket.IO client
        const socket = io(); 

        // Setup the Distance chart with default values
        const distanceCtx = document.getElementById('distanceChart').getContext('2d');
        const distanceChart = new Chart(distanceCtx, {
            type: 'line',
            data: {
                labels: [], // Initialize with no labels
                datasets: [{
                    label: 'Distance (cm)',
                    data: [], // Initialize with no data
                    borderColor: "#3e95cd",
                    backgroundColor: "rgba(62, 149, 205, 0.2)",
                    fill: true
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        type: 'time', // Use time-based x-axis
                        time: {
                            unit: 'minute', // Group by minute intervals
                            tooltipFormat: 'MMM D, YYYY h:mm:ss a' // Format for tooltips
                        },
                        title: {
                            display: true,
                            text: 'Time'
                        },
                        grid: {
                            display: true // Ensure grid lines are displayed
                        }
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Distance (cm)'
                        },
                        grid: {
                            display: true // Ensure grid lines are displayed
                        }
                    }
                }
            }
        });

        // Handle errors and connection
        socket.on('connect', () => {
            console.log('Socket.IO connected');
        });

        socket.on('disconnect', () => {
            console.log('Socket.IO disconnected');
        });

        socket.on('error', (error) => {
            console.error('Socket.IO error:', error);
        });

        // Listen for MQTT data from Socket.IO and update the charts
        socket.on('mqtt-message', (data) => {
            try {
                const parsedData = JSON.parse(data.message);

                if (parsedData.distance_cm !== undefined && parsedData.date && parsedData.time) {
                    // Combine date and time fields into a single Date object using Luxon
                    const dateTime = `${parsedData.date}T${parsedData.time}`;
                    const timestamp = luxon.DateTime.fromISO(dateTime, { zone: 'Asia/Kuala_Lumpur' }).toJSDate(); // Parse with Luxon and convert to JS Date
                    
                    // Update the Distance chart
                    distanceChart.data.labels.push(timestamp);
                    distanceChart.data.datasets[0].data.push(parsedData.distance_cm);
                    
                    // Remove old data to keep the chart updated with only recent data
                    const oneMinuteAgo = new Date(new Date().getTime() - 60000);
                    distanceChart.data.labels = distanceChart.data.labels.filter((label) => label > oneMinuteAgo);
                    distanceChart.data.datasets[0].data = distanceChart.data.datasets[0].data.slice(-distanceChart.data.labels.length);

                    distanceChart.update();
                } else {
                    console.warn('Missing distance_cm, date, or time in data:', parsedData);
                }
            } catch (err) {
                console.error('Error parsing message:', err);
            }
        });

        // Initialize chart with a placeholder grid
        setTimeout(() => {
            if (distanceChart.data.labels.length === 0) {
                distanceChart.data.labels.push(new Date()); // Add a placeholder timestamp
                distanceChart.data.datasets[0].data.push(0); // Add a placeholder value
                distanceChart.update();
            }
        }, 1000);
    </script>
</body>
</html>
