<% layout('layouts/boilerplate') %>
    <!-- <h2>
        <%= data.locationName %>
    </h2> -->  

    <div class="container mx-auto px-4 mt-2">
        <!-- 1st Row -->
        <div class="flex flex-wrap -mx-4">
            <div class="w-full md:w-1/3 px-4 mb-4"> <!-- 1/3 width for each box -->
                <div class="box box3 bg-white p-4 rounded shadow">
                    <div id="spark_water"></div>
                </div>
            </div>
            <div class="w-full md:w-1/3 px-4 mb-4"> <!-- 1/3 width for each box -->
                <div class="box box3 bg-white p-4 rounded shadow">
                    <div id="spark_temp"></div>
                </div>
            </div>
            <div class="w-full md:w-1/3 px-4 mb-4"> <!-- 1/3 width for each box -->
                <div class="box box3 bg-white p-4 rounded shadow">
                    <div id="spark_humidity"></div>
                </div>
            </div>
        </div>

        <!-- 2nd Row -->
        <div class="flex flex-wrap -mx-4 mb-20"> <!-- Added margin bottom -->
            <div class="w-full px-4 mb-4"> <!-- Full width for rain_bar -->
                <div class="box bg-white p-4 rounded shadow">
                    <div id="rain_bar"></div>
                </div>
            </div>
        </div>
    </div>

    <script src="/javascripts/dashboard_apexChart/waterLineChart.js"></script>
    <script src="/javascripts/dashboard_apexChart/tempLineChart.js"></script>
    <script src="/javascripts/dashboard_apexChart/humidityLineChart.js"></script>
    <script src="/javascripts/dashboard_apexChart/rainBarChart.js"></script>
    <script>

        const socket = io();
        // Assuming data2 is an array of objects from your MongoDB

        var data2 = <%- JSON.stringify(data2) %>;

        console.log("from dashboard ejs", data2);

        // Function to populate charts with the last 24 data points from MongoDB (data2)
        function populateCharts(data2) {
            // Initialize arrays to hold the data for each chart
            let waterSeriesData = [];
            let tempSeriesData = [];
            let humiditySeriesData = [];
            let lightRainSeries = [];
            let heavyRainSeries = [];
            let categories = [];

            // Iterate over data2 and populate arrays with values
            data2.forEach(entry => {
                 let datetime = `${entry.date} ${entry.time}`;
                
                waterSeriesData.push({x: new Date(datetime), y: entry.distance });
                tempSeriesData.push({ x: new Date(datetime), y: entry.tempC });
                humiditySeriesData.push({ x: new Date(datetime), y: entry.humidity });

                // Rain data logic (light rain capped at 30, remainder goes to heavy rain)
                if (entry.rain > 30) {
                    lightRainSeries.push(30);  // Light Rain is capped at 30
                    heavyRainSeries.push(entry.rain - 30);  // The rest goes to Heavy Rain
                } else {
                    lightRainSeries.push(entry.rain);
                    heavyRainSeries.push(0);  // No Heavy Rain if less than 30
                }

                // Add the new datetime to the categories
                categories.push(datetime);
            });

            // Update the charts with the populated data
            chart_water.updateSeries([{ data: waterSeriesData }], true);
            chart_temp.updateSeries([{ data: tempSeriesData }], true);
            chart_humidity.updateSeries([{ data: humiditySeriesData }], true);

            // Update the rain bar chart
            chartBar.updateSeries([
                { data: lightRainSeries },
                { data: heavyRainSeries }
            ], true);

            chartBar.updateOptions({
                xaxis: {
                    categories: categories
                }
            });

            // Update the titles of the sparkline charts with the latest values from data2
            const lastEntry = data2[data2.length - 1];  // Get the latest (last) data point
            chart_water.updateOptions({
                title: {
                    text: `${lastEntry.distance} cm`
                }
            });
            chart_temp.updateOptions({
                title: {
                    text: `${lastEntry.tempC} °C`
                }
            });
            chart_humidity.updateOptions({
                title: {
                    text: `${lastEntry.humidity} %`
                }
            });
        }

        // Call the function to populate the charts with data2 on page load
        populateCharts(data2);

        // Function to update charts with new data
        function updateCharts(newData) {
            // Extract the current series data and labels for each chart
            let waterSeriesData = chart_water.w.config.series[0].data;
            let tempSeriesData = chart_temp.w.config.series[0].data;
            let humiditySeriesData = chart_humidity.w.config.series[0].data;
            let label_water = chart_water.w.config.labels;
            let label_temp = chart_temp.w.config.labels;
            let label_humidity = chart_humidity.w.config.labels;
            //bar rain
            let lightRainSeries = chartBar.w.config.series[0].data;
            let heavyRainSeries = chartBar.w.config.series[1].data;
            let categories = chartBar.w.config.xaxis.categories;

            // Combine date and time to form a datetime string
            let datetime = `${newData.date} ${newData.time}`;

            // Add new data points with datetime labels
            waterSeriesData.push({ x: datetime, y: newData.distance_cm });
            tempSeriesData.push({ x: datetime, y: newData.tempC });
            humiditySeriesData.push({ x: datetime, y: newData.humidity });

            // Determine if the new data falls into Light Rain or Heavy Rain
            if (newData.rain > 30) {
                lightRainSeries.push(30);  // Light Rain is capped at 30
                heavyRainSeries.push(newData.rain - 30); // The rest goes to Heavy Rain
            } else {
                lightRainSeries.push(newData.rain);
                heavyRainSeries.push(0); // No Heavy Rain if less than 30
            }

            // Add the new datetime to the categories
            categories.push(datetime);

            // Limit data points to the last 24 (or any other limit you prefer)
            if (waterSeriesData.length > 24) {
                waterSeriesData.shift();
                tempSeriesData.shift();
                humiditySeriesData.shift();
                label_water.shift();
                label_temp.shift();
                label_humidity.shift();
            }

            // Limit data points to the last 24 for each series and labels
            if (lightRainSeries.length > 24) {
                lightRainSeries.shift();
            }
            if (heavyRainSeries.length > 24) {
                heavyRainSeries.shift();
            }
            if (categories.length > 24) {
                categories.shift();
            }

            // Update the charts with new data and labels
            chart_water.updateSeries([{ data: waterSeriesData }], true); // true for smooth transition
            chart_temp.updateSeries([{ data: tempSeriesData }], true);
            chart_humidity.updateSeries([{ data: humiditySeriesData }], true);
            // Update the bar chart with new series data and categories (x-axis labels)
            chartBar.updateSeries([
                { data: lightRainSeries },
                { data: heavyRainSeries }
            ], true); // true for smooth transition

            chartBar.updateOptions({
                xaxis: {
                    categories: categories
                }
            });

            // Update titles with the latest values
            chart_water.updateOptions({
                title: {
                    text: `${newData.distance_cm} cm`
                }
            });
            chart_temp.updateOptions({
                title: {
                    text: `${newData.tempC} °C`
                }
            });
            chart_humidity.updateOptions({
                title: {
                    text: `${newData.humidity} %`
                }
            });
        }

        socket.on('mqtt-message', (data) => {
            const messageData = JSON.parse(data.message);

            // Example format of messageData:
            // { distance_cm: 29.22, tempC: 28.5, humidity: 65.2, date: '2024-09-03', time: '00:04:11' }

            updateCharts(messageData);
        });

    </script>